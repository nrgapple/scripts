#!/bin/bash

# Configuration
API_ENDPOINT="https://api.openai.com/v1/chat/completions"
MODEL="gpt-4-0125-preview" # Adjust model as necessary

# Directory of the script
DIR="$(dirname "$0")"

# Load .env file if present for API Key
if [ -f "$DIR/.env" ]; then
    export $(grep -v '^#' "$DIR/.env" | xargs)
fi

# Ensure the OPENAI_API_KEY is set
if [ -z "$OPENAI_API_KEY" ]; then
    echo "OpenAI API key is not set. Please ensure your .env file contains OPENAI_API_KEY=Your_OpenAI_API_Key_Here."
    exit 1
fi

# Using git diff --cached to include all staged changes
GIT_DIFF=$(git diff --cached --unified=0 | head -c 4000) # Limit characters to avoid overloading the API request

# Formatting the git log for the last 10 commit messages
GIT_LOG=$(git log -10 --pretty=format:"%s" | tr '\n' ' ' | head -c 1000) # Limit to prevent overload

# Creating a combined prompt from git diff and log
read -r -d '' CONTENT <<-EOM
Recent Git Changes:
$GIT_DIFF

Last 10 Commit Messages:
$GIT_LOG
EOM

PROMPT="Based on the recent git changes and commit history, generate a commit message that matches the style of the previous commits. It should be concise. No more than two sentences but one is perferred. Only return the message. No formatting or explanation."

# Preparing the JSON payload for the API request correctly for the chat API
DATA=$(jq -n \
    --arg prompt "$PROMPT" \
    --arg content "$CONTENT" \
    --arg model "$MODEL" \
    '{model: $model, messages: [{"role": "system", "content": $prompt}, {"role": "user", "content": $content}], temperature: 0.7}')

# Make the API request
RESPONSE=$(curl -s -X POST "$API_ENDPOINT" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    --data "$DATA")

# Extract and handle the commit message
COMMIT_MESSAGE=$(echo $RESPONSE | jq -r '.choices[0].message.content')

# Check if commit message is empty
if [ -z "$COMMIT_MESSAGE" ]; then
    echo "Failed to generate a commit message."
    exit 1
fi

echo "Suggested commit message:"
echo "$COMMIT_MESSAGE"
echo -n "Proceed with commit? (y/n): "
read CONFIRM

if [[ $CONFIRM == "y" ]]; then
    git commit -am "$COMMIT_MESSAGE"
    echo "Changes committed with generated message."
else
    echo "Commit aborted."
fi
